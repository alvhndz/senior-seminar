def OS2IP(X):
    """Return the integer primitive x for the octet-string X."""
    # the sum below is the same as: int.from_bytes(X, byteorder = 'big')
    return sum([x * 256**i for i, x in enumerate(X[::-1])])
    
xLen=116
a=1725407206559124414262775558036503363064228085318307003328879078787363094423245885746439779754368306393587124793170863467980001097533679809384382517969177269488080616807424955212840365424212959420111398825941435746017065393535568260957387818213402876939831656625655617513727553140
b=287101874499563511517274625693599634164659978647960508961005359525734553050793584577215512179449180764094683149204979666322538790035994601590541117759527904133629733463936649070787697899716452610376032894463212129223492366548874418088170509640147500836911687180980832066830360864
c=4036157892442068336082369800710226842901895235006035033530534455492109324426834792892671498674394861228244517069702057

def I2OSP(x, xLen):
    """Map an integer x to an octet-string X of length xLen."""
    assert x < 256**xLen, "integer too large"
    # below is the same as: return x.to_bytes(xLen, byteorder = 'big')
    if x == 0:
        return b'\x00'
    bs = b''
    while x:
        bs += (x % 256).to_bytes(1, byteorder = 'big')
        x //= 256
    return b'\x00' * (xLen - len(bs)) + bs[::-1]
    
message_ = I2OSP(a, xLen)
a=(message_.decode('utf8'))

message_ = I2OSP(b, xLen)
b=(message_.decode('utf8'))

message_ = I2OSP(c, xLen)
c=(message_.decode('utf8'))

print(a,b,c)
